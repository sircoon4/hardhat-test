import {
  time,
  loadFixture,
} from "@nomicfoundation/hardhat-toolbox/network-helpers";
import { anyValue } from "@nomicfoundation/hardhat-chai-matchers/withArgs";
import { expect } from "chai";
import hre from "hardhat";
import {ethers} from "ethers-ts";

describe("Box", function () {
  async function deployBoxFixture() {
    const [owner, otherAccount] = await hre.ethers.getSigners();

    const Box = await hre.ethers.getContractFactory("Box");
    const boxWithoutSigner = await Box.deploy();
    const box = boxWithoutSigner.connect(owner);

    return { box };
  }

  describe("Versatile", function () {
    it("implement test", async function () {
      const { box } = await loadFixture(deployBoxFixture);

      expect(await box.retrieve()).to.equal(0);
      await box.store(20);
      expect(await box.retrieve()).to.equal(20);
      
      let arr: string[]
      arr = [
        ethers.utils.hexlify('0x5a444536557a63784f6a42464169454168626765676c7159344b4b796d5348596a63424134525278592f7257597564343777376934365a2b71544d43494642384e6b534a78427a6f33454a3079644e484852452f6c4465386d6971777a4c333856616a66335365534d547068624752314e7a70306558426c58326c6b645445324f6d6868593274665957356b58334e7359584e6f4d6a4a314e6a7032595778315a584e6b645445794f6d467755335276626d564462335675644855784f6a42314d544d3659585a68644746795157526b636d567a637a49774f70685035644b5273526f7135306568586a3158746e75487063664c645467365…756454593664476c6a6132567964545136545756685a4756704d5441774d4441774d4441774d4441774d4441774d4441774d47566c4d5470756154557a4d54526c4d5470774e6a5536425044594a756848474e3479373273337458496f5969462b694d6441306d32652f4e5a6c44754b4b6d5a3332585757306559465a2f66354f56716b4738364e5577764433336e725a757a615745456d7139553161564959784f6e4d794d44722f6c69676d575457442f6b58586e626d554551356d42554f4e4a7a4536644855794e7a6f794d4449304c5441334c544532564441304f6a55344f6a45304c6a67354e4445324e466f784f6e56735a57553d'),
        ethers.utils.hexlify('0x5a444536557a63774f6a424541694258746a774667505631574d48496269314561716e6c7236754e484748613769744335523746544e55344f514967485251432f495275635a362f42503463534b49734a36396a676355457777615968736a5154753979315649784f6d46735a4855334f6e523563475666615752314d5459366147466a61313968626d526663327868633267794d6e55324f6e5a686248566c633252314d54493659584254644739755a554e7664573530645445364d4855784d7a7068646d463059584a425a4752795a584e7a4d6a413639642f6634354b516d797871724c697a4a653951726663354f594a314f44706a6…314e6a703061574e725a584a314e44704e5a57466b5a576b784d4441774d4441774d4441774d4441774d4441774d4441775a5755784f6d35704e4441794e6d55784f6e41324e546f4551756c5344554b796144456d376b416445686d36515a7051636f50654453695a6b724e3441464369774c666538316d527a71575667334e4e472b6a4b616872566b4c35574e5578347a51366f775442477377684f346a4536637a49774f75714a7835573735654a4b612b375176617478516e704d58784c7a4d547030645449334f6a49774d6a51744d4463744d545a554d4451364e5467364d5467754e546b784f445930576a45366457786c5a513d3d'),
        ethers.utils.hexlify('0x5a444536557a63784f6a424641694541716f42397a6a5156444368613443556e2b784546445a6e5443696d6c5a492f4e4c6437486e3252713354774349466d6961562f774c755343682f7351772f324b3655716a69617a756f6a4b796366734e7349303841427a4f4d547068624752314e7a70306558426c58326c6b645445324f6d6868593274665957356b58334e7359584e6f4d6a4a314e6a7032595778315a584e6b645445794f6d467755335276626d564462335675644855784f6a42314d544d3659585a68644746795157526b636d567a637a49774f754c6f747945417a7537573148664a7771465830536b4272706b78645467365…305a584a7a626e55324f6e52705932746c636e55304f6b316c5957526c615445774d4441774d4441774d4441774d4441774d4441774d44426c5a544536626d6b335a544536634459314f6752343732356f523178714e5671504a6f31374c59456330307167766c4378686975554f6264354f765132524b4b416d797a6736357242373264627066764b4d3546656d5739624132723864577053625a7a67792b6c464d54707a4d6a413655672f425548567a6859713561537078677176325a2f3346664d6b784f6e52314d6a63364d6a41794e4330774e7930784e6c51774e446f314f446f794f53347a4e4451334d4456614d5470316247566c'),
        ethers.utils.hexlify('0x5a444536557a63784f6a42464169454177656e755a5a555670447664356545793137486659456b6d50514c6b64726a4e6c2f3167794c757836723843494336374f532b557833384d35694366766d7a6f56317637444678684e7547624c4b666d513149424558664a4d547068624752314e7a70306558426c58326c6b645445784f6d4e7359576c7458326c305a57317a64545936646d46736457567a5a4855794f6d4e6b624777794d446f6f367034614e39313175565167367a576f3746447652667572456d78735a4855784d7a706b5a574e7062574673554778685932567a4d546f416454633662576c7564475679633235314e6a70306…3061574e725a584a314e44704e5a57466b5a576b784d4441774d4441774d4441774d4441774d4441774d4441775a5755784f6d35704d6a55334d5445314d4755784f6e41324e546f456a34614335583359337675645864556f76464f793074686e704d433374765035693239456f5765464a53624d786d70744e524b385170776734674b414653764c2f75696c4138416f785731664e497469534a307566444536637a49774f73725744786930756869666678775534695a396d79443173572f314d547030645449334f6a49774d6a51744d4463744d5464554d4451364e5467364d6a4d754e5455774f444930576a45366457786c5a513d3d'),
        ethers.utils.hexlify('0x5a444536557a63784f6a42464169454168626765676c7159344b4b796d5348596a63424134525278592f7257597564343777376934365a2b71544d43494642384e6b534a78427a6f33454a3079644e484852452f6c4465386d6971777a4c333856616a66335365534d547068624752314e7a70306558426c58326c6b645445324f6d6868593274665957356b58334e7359584e6f4d6a4a314e6a7032595778315a584e6b645445794f6d467755335276626d564462335675644855784f6a42314d544d3659585a68644746795157526b636d567a637a49774f70685035644b5273526f7135306568586a3158746e75487063664c645467365…756454593664476c6a6132567964545136545756685a4756704d5441774d4441774d4441774d4441774d4441774d4441774d47566c4d5470756154557a4d54526c4d5470774e6a5536425044594a756848474e3479373273337458496f5969462b694d6441306d32652f4e5a6c44754b4b6d5a3332585757306559465a2f66354f56716b4738364e5577764433336e725a757a615745456d7139553161564959784f6e4d794d44722f6c69676d575457442f6b58586e626d554551356d42554f4e4a7a4536644855794e7a6f794d4449304c5441334c544532564441304f6a55344f6a45304c6a67354e4445324e466f784f6e56735a57553d')
      ]
      await box.processTransaction(0, arr);
    });
  });
});

const hexToByte = (hex: string) => {
  const key = '0123456789abcdef'
  let newBytes = []
  let currentChar = 0
  let currentByte = 0
  for (let i=0; i<hex.length; i++) {   // Go over two 4-bit hex chars to convert into one 8-bit byte
    currentChar = key.indexOf(hex[i])
    if (i%2===0) { // First hex char
      currentByte = (currentChar << 4) // Get 4-bits from first hex char
    }
    if (i%2===1) { // Second hex char
      currentByte += (currentChar)     // Concat 4-bits from second hex char
      newBytes.push(currentByte)       // Add byte
    }
  }
  return new Uint8Array(newBytes)
}
